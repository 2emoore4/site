// Generated by CoffeeScript 1.6.3
(function() {
  var animate, antialias, av_180, av_in, av_out, dialog_durations, dialog_start_times, dialogs, drawing_renderer, duck_off, duck_on, goto, graphics, h, init, init_person, nod, p, pause_all_dialog, person, render_graphics, renderer, shake, song_ducked_volume, song_element, song_unducked_volume, specialGoto, stage, transparent, vibe_element, video_effect, video_element, video_speed_down, video_speed_up, video_time, video_timing_effects, video_toggle, w;

  stage = new PIXI.Stage(0xFFFFFF);

  w = 848;

  h = 480;

  transparent = true;

  antialias = true;

  renderer = new PIXI.WebGLRenderer(w, h, null, transparent, antialias);

  graphics = new PIXI.Graphics;

  drawing_renderer = new UTIL.renderer(graphics, w, h);

  window.r = drawing_renderer;

  noise.seed(Math.random());

  init = function() {
    document.body.appendChild(renderer.view);
    init_person();
    stage.addChild(graphics);
    setInterval(render_graphics, 60);
    return requestAnimationFrame(animate);
  };

  video_element = null;

  video_time = null;

  song_element = null;

  vibe_element = null;

  dialogs = [null, null, null, null, null];

  song_unducked_volume = 0.15;

  song_ducked_volume = 0.15;

  window.onload = function() {
    video_element = document.getElementById("videounder");
    video_time = document.getElementById("time");
    song_element = document.getElementById("song");
    song_element.volume = song_unducked_volume;
    vibe_element = document.getElementById("vibe");
    return vibe_element.volume = 0.5;
  };

  dialog_durations = {
    'd1': 64,
    'd2': 17,
    'd3': 14,
    'd4': 5,
    'd5': 14,
    'd6': 6
  };

  dialog_start_times = pause_all_dialog = function() {
    var d, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = dialogs.length; _i < _len; _i++) {
      d = dialogs[_i];
      _results.push(d != null ? d.pause() : void 0);
    }
    return _results;
  };

  goto = function(time) {
    return video_element.currentTime = time;
  };

  window.goto = goto;

  video_toggle = function() {
    if (video_element.paused) {
      video_element.play();
      return song_element.play();
    } else {
      video_element.pause();
      return song_element.pause();
    }
  };

  video_speed_up = function() {
    var i, _results;
    i = 1;
    _results = [];
    while (i < 5) {
      setTimeout(function() {
        video_element.playbackRate = i;
        return song_element.playbackRate = (i + 5) / 5;
      }, 250 * (i - 1));
      _results.push(i += 0.1);
    }
    return _results;
  };

  video_speed_down = function() {
    var i, _results;
    i = 5;
    _results = [];
    while (i > 1.1) {
      setTimeout(function() {
        video_element.playbackRate = i;
        return song_element.playbackRate = i;
      }, 250 * (5 - i));
      _results.push(i -= 0.1);
    }
    return _results;
  };

  p = function() {
    d1.pause();
    d2.pause();
    d3.pause();
    d4.pause();
    d5.pause();
    d6.pause();
    return vibe.pause();
  };

  window.p = p;

  specialGoto = function(vidframe) {
    var later;
    goto(vidframe);
    later = function() {
      goto(vidframe);
      return p();
    };
    return setTimeout(later, 300);
  };

  window.specialGoto = specialGoto;

  video_timing_effects = [
    {
      trigger_time: 0,
      what_happens: function() {
        person.happy();
        d1.play();
        return duck_on();
      }
    }, {
      trigger_time: 0 + dialog_durations['d1'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 10.5,
      what_happens: function() {
        return vibe_element.play();
      }
    }, {
      trigger_time: 25,
      what_happens: function() {
        return video_element.currentTime = 50;
      }
    }, {
      trigger_time: 72,
      what_happens: function() {
        return video_speed_up();
      }
    }, {
      trigger_time: 113,
      what_happens: function() {
        return video_speed_down();
      }
    }, {
      trigger_time: 113,
      what_happens: function() {
        d2.play();
        return duck_on();
      }
    }, {
      trigger_time: 113 + dialog_durations['d2'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 115,
      what_happens: function() {
        return av_in();
      }
    }, {
      trigger_time: 116,
      what_happens: function() {
        return nod();
      }
    }, {
      trigger_time: 121,
      what_happens: function() {
        return person.wave();
      }
    }, {
      trigger_time: 124,
      what_happens: function() {
        return shake();
      }
    }, {
      trigger_time: 131,
      what_happens: function() {
        return av_out();
      }
    }, {
      trigger_time: 133,
      what_happens: function() {
        return video_speed_up();
      }
    }, {
      trigger_time: 158,
      what_happens: function() {
        return video_speed_down();
      }
    }, {
      trigger_time: 160,
      what_happens: function() {
        d3.play();
        duck_on();
        return av_in();
      }
    }, {
      trigger_time: 160 + dialog_durations['d3'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 162,
      what_happens: function() {
        return person.sit();
      }
    }, {
      trigger_time: 165,
      what_happens: function() {
        return nod();
      }
    }, {
      trigger_time: 168,
      what_happens: function() {
        return person.shrug_shoulders();
      }
    }, {
      trigger_time: 173,
      what_happens: function() {
        return person.stand();
      }
    }, {
      trigger_time: 173.5,
      what_happens: function() {
        return person.toggle_walk();
      }
    }, {
      trigger_time: 176,
      what_happens: function() {
        d4.play();
        return duck_on();
      }
    }, {
      trigger_time: 176 + dialog_durations['d4'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 181,
      what_happens: function() {
        return d4.pause();
      }
    }, {
      trigger_time: 180,
      what_happens: function() {
        return av_out();
      }
    }, {
      trigger_time: 182,
      what_happens: function() {
        return video_speed_up();
      }
    }, {
      trigger_time: 223,
      what_happens: function() {
        return video_speed_down();
      }
    }, {
      trigger_time: 226,
      what_happens: function() {
        return av_in();
      }
    }, {
      trigger_time: 233.3,
      what_happens: function() {
        return av_out();
      }
    }, {
      trigger_time: 235,
      what_happens: function() {
        return video_speed_up();
      }
    }, {
      trigger_time: 244,
      what_happens: function() {
        return video_speed_down();
      }
    }, {
      trigger_time: 247,
      what_happens: function() {
        return av_in();
      }
    }, {
      trigger_time: 247,
      what_happens: function() {
        d5.play();
        return duck_on();
      }
    }, {
      trigger_time: 247 + dialog_durations['d5'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 249.5,
      what_happens: function() {
        return person.angry();
      }
    }, {
      trigger_time: 255,
      what_happens: function() {
        return person.sad();
      }
    }, {
      trigger_time: 255.5,
      what_happens: function() {
        return shake();
      }
    }, {
      trigger_time: 257.5,
      what_happens: function() {
        return av_out();
      }
    }, {
      trigger_time: 259,
      what_happens: function() {
        return video_speed_up();
      }
    }, {
      trigger_time: 285,
      what_happens: function() {
        return video_element.currentTime = 295;
      }
    }, {
      trigger_time: 353,
      what_happens: function() {
        person.toggle_walk();
        person.happy();
        return av_in(true);
      }
    }, {
      trigger_time: 362,
      what_happens: function() {
        return av_out(true);
      }
    }, {
      trigger_time: 386,
      what_happens: function() {
        return video_speed_down();
      }
    }, {
      trigger_time: 389,
      what_happens: function() {
        person.stand();
        person.happy();
        av_180();
        return av_out();
      }
    }, {
      trigger_time: 392,
      what_happens: function() {
        d6.play();
        return duck_on();
      }
    }, {
      trigger_time: 392 + dialog_durations['d6'],
      what_happens: function() {
        return duck_off();
      }
    }, {
      trigger_time: 394,
      what_happens: function() {
        return nod();
      }
    }, {
      trigger_time: 396,
      what_happens: function() {
        return person.wave();
      }
    }, {
      trigger_time: 399,
      what_happens: function() {
        person.rotate_y(-Math.PI / 2);
        return person.toggle_walk();
      }
    }, {
      trigger_time: 400,
      what_happens: function() {}
    }, {
      trigger_time: 401.8,
      what_happens: function() {
        return av_in();
      }
    }
  ];

  av_in = function(fast) {
    var i, speed, _results;
    speed = fast ? 100 : 500;
    i = 0;
    _results = [];
    while (i < 1.57) {
      setTimeout(function() {
        return r.rotate_y(0.01);
      }, speed * i);
      _results.push(i += 0.01);
    }
    return _results;
  };

  window.av_in = av_in;

  av_out = function(fast) {
    var i, speed, _results;
    speed = fast ? 100 : 500;
    i = 0;
    _results = [];
    while (i < 1.57) {
      setTimeout(function() {
        return r.rotate_y(-0.01);
      }, speed * i);
      _results.push(i += 0.01);
    }
    return _results;
  };

  window.av_out = av_out;

  av_180 = function() {
    return r.rotate_y(Math.PI);
  };

  window.av_180 = av_180;

  duck_on = function() {
    console.log("duck on");
    return song_element.volume = song_ducked_volume;
  };

  duck_off = function() {
    console.log("duck off");
    return song_element.volume = song_unducked_volume;
  };

  video_effect = function() {
    var ct, vte, _i, _len, _results;
    if (video_element === null) {
      return;
    }
    ct = video_element.currentTime;
    video_time.innerText = ct;
    _results = [];
    for (_i = 0, _len = video_timing_effects.length; _i < _len; _i++) {
      vte = video_timing_effects[_i];
      if (ct > vte.trigger_time && !vte.already_happened) {
        vte.what_happens();
        _results.push(vte.already_happened = true);
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  person = null;

  init_person = function() {
    person = new PERSON.person();
    window.person = person;
    return drawing_renderer.world.add(person);
  };

  render_graphics = function() {
    video_effect();
    graphics.clear();
    graphics.lineStyle(4, 0xffffff);
    person.do_stuff();
    return drawing_renderer.render_world();
  };

  animate = function() {
    renderer.render(stage);
    return requestAnimationFrame(animate);
  };

  nod = function() {
    person.head_anim = true;
    person.nod_head();
    return setTimeout(function() {
      return person.head_anim = false;
    }, 760);
  };

  shake = function() {
    person.head_anim = true;
    person.shake_head();
    return setTimeout(function() {
      return person.head_anim = false;
    }, 680);
  };

  window.onkeydown = function(event) {
    console.log(event.which);
    switch (event.which) {
      case 32:
        return video_toggle();
      case 37:
        return video_element.currentTime -= 0.2;
      case 38:
        return video_element.currentTime += 1;
      case 39:
        return video_element.currentTime += 0.2;
      case 40:
        return video_element.currentTime -= 1;
      case 65:
        return person.angry();
      case 71:
        return person.wave();
      case 72:
        return person.happy();
      case 74:
        return person.sit();
      case 75:
        return person.stand();
      case 78:
        return shake();
      case 83:
        return person.sad();
      case 85:
        return person.shrug_shoulders();
      case 87:
        return person.toggle_walk();
      case 89:
        return nod();
    }
  };

  init();

}).call(this);

/*
//@ sourceMappingURL=walk.map
*/
